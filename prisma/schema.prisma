// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  password String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Team      Team?
  Property  Property[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique //@db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  image     String
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String   @id @default(uuid()) @db.Uuid
  // userId    String   @unique @db.Uuid
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAddressed Boolean  @default(false)
  name        String
  email       String
  subject     String
  message     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PropertyType {
  id         String     @id @default(uuid()) @db.Uuid
  title      String
  isActive   Boolean    @default(true)
  icon       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
}

model Property {
  id        String         @id @default(uuid()) @db.Uuid
  title     String
  userId    String         //@db.Uuid
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  typeId    String         @db.Uuid
  type      PropertyType   @relation(fields: [typeId], onDelete: Cascade, references: [id])
  status    PropertyStatus @default(onRent)
  price     Decimal        @db.Money
  features  String?        @db.Text
  county    String
  subCounty String
  images    String[]
  listed    Boolean        @default(true)

  isActive  Boolean           @default(true)
  icon      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  requests  PropertyRequest[]
}

enum PropertyStatus {
  onRent
  onSale
}

model PropertyRequest {
  id          String   @id @default(uuid()) @db.Uuid
  propertyId  String   @db.Uuid
  property    Property @relation(fields: [propertyId], onDelete: Cascade, references: [id])
  name        String
  email       String
  phoneNumber String
  isActive    Boolean  @default(true)
  message     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
