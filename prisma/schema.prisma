// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model County {
  code         String      @id @unique
  name         String
  capital      String
  subscounties SubCounty[]
}

model Click {
  id    String @id @default(uuid()) @db.Uuid
  count Int    @default(0)
}

model SubCounty {
  code       String @id @unique
  countyCode String
  county     County @relation(fields: [countyCode], onDelete: Cascade, references: [code])
  name       String
}

model Account {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider          String
  providerAccountId String   @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Advert {
  id          String   @id @default(uuid()) @db.Uuid
  image       String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                   String             @id @default(uuid()) @db.Uuid
  name                 String
  email                String             @unique
  phoneNumber          String?            @unique
  address              String?
  password             String?            @db.VarChar(256)
  isActive             Boolean            @default(true)
  isStaff              Boolean            @default(false)
  isSuperUser          Boolean            @default(false)
  type                 UserType
  image                String?
  identificationNumber String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  team                 Team?
  properties           Property[]
  accounts             Account[]
  OTPVerificatiions    OTPVerificatiion[]
  accountVerified      Boolean            @default(false)
}

model Team {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  image     String
  position  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id          String   @id @default(uuid()) @db.Uuid
  // userId    String   @unique @db.Uuid
  // user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAddressed Boolean  @default(false)
  name        String
  email       String
  phoneNumber String
  subject     String
  message     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PropertyType {
  id         String     @id @default(uuid()) @db.Uuid
  title      String
  isActive   Boolean    @default(true)
  icon       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  properties Property[]
}

model Property {
  id               String                   @id @default(uuid()) @db.Uuid
  title            String
  userId           String                   @db.Uuid
  user             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  typeId           String                   @db.Uuid
  type             PropertyType             @relation(fields: [typeId], onDelete: Cascade, references: [id])
  status           PropertyStatus           @default(onRent)
  price            Decimal                  @db.Money
  features         String?                  @db.Text
  county           String
  subCounty        String
  landMark         String
  roadAccessNature PropertyRoadAccessNature
  images           String[]                 @default([])
  listed           Boolean                  @default(true)
  isActive         Boolean                  @default(false)
  rejectionReason  String?                  @db.Text
  size             String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  requests         PropertyRequest[]
  payment          Payment?
}

enum PropertyStatus {
  onRent
  onSale
}

enum PropertyRoadAccessNature {
  Highway
  Tarmac
  Murram
}

enum UserType {
  Organization
  Individual
}

model PropertyRequest {
  id          String   @id @default(uuid()) @db.Uuid
  propertyId  String   @db.Uuid
  property    Property @relation(fields: [propertyId], onDelete: Cascade, references: [id])
  name        String
  email       String
  phoneNumber String
  isAddressed Boolean  @default(false)
  message     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id                 String   @id @unique @default(uuid()) @db.Uuid
  amount             Decimal  @db.Money
  propertyId         String   @unique @db.Uuid
  property           Property @relation(fields: [propertyId], onDelete: Cascade, references: [id])
  complete           Boolean  @default(false)
  description        String?  @db.Text
  merchantRequestId  String?  @unique
  checkoutRequestId  String?
  resultCode         String?
  resultDescription  String?
  mpesareceiptNumber String?
  transactionDate    String?
  phoneNumber        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model OTPVerificatiion {
  id        String   @id @unique @default(cuid()) //Used as the otp
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  verified  Boolean  @default(false)
  expiry    DateTime
  createdAt DateTime @default(now())
}
